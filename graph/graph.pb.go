// Code generated by protoc-gen-go.
// source: graph.proto
// DO NOT EDIT!

/*
Package graph is a generated protocol buffer package.

It is generated from these files:
	graph.proto

It has these top-level messages:
	Origin
	Edge
*/
package graph

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Origin struct {
	Degree int32  `protobuf:"varint,1,opt,name=degree" json:"degree,omitempty"`
	Guid   string `protobuf:"bytes,2,opt,name=guid" json:"guid,omitempty"`
}

func (m *Origin) Reset()                    { *m = Origin{} }
func (m *Origin) String() string            { return proto.CompactTextString(m) }
func (*Origin) ProtoMessage()               {}
func (*Origin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Edge struct {
	Guid string `protobuf:"bytes,1,opt,name=guid" json:"guid,omitempty"`
	From string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To   string `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Origin)(nil), "graph.Origin")
	proto.RegisterType((*Edge)(nil), "graph.Edge")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Graph service

type GraphClient interface {
	CreateGraph(ctx context.Context, in *Origin, opts ...grpc.CallOption) (Graph_CreateGraphClient, error)
}

type graphClient struct {
	cc *grpc.ClientConn
}

func NewGraphClient(cc *grpc.ClientConn) GraphClient {
	return &graphClient{cc}
}

func (c *graphClient) CreateGraph(ctx context.Context, in *Origin, opts ...grpc.CallOption) (Graph_CreateGraphClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Graph_serviceDesc.Streams[0], c.cc, "/graph.Graph/CreateGraph", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphCreateGraphClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Graph_CreateGraphClient interface {
	Recv() (*Edge, error)
	grpc.ClientStream
}

type graphCreateGraphClient struct {
	grpc.ClientStream
}

func (x *graphCreateGraphClient) Recv() (*Edge, error) {
	m := new(Edge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Graph service

type GraphServer interface {
	CreateGraph(*Origin, Graph_CreateGraphServer) error
}

func RegisterGraphServer(s *grpc.Server, srv GraphServer) {
	s.RegisterService(&_Graph_serviceDesc, srv)
}

func _Graph_CreateGraph_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Origin)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServer).CreateGraph(m, &graphCreateGraphServer{stream})
}

type Graph_CreateGraphServer interface {
	Send(*Edge) error
	grpc.ServerStream
}

type graphCreateGraphServer struct {
	grpc.ServerStream
}

func (x *graphCreateGraphServer) Send(m *Edge) error {
	return x.ServerStream.SendMsg(m)
}

var _Graph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "graph.Graph",
	HandlerType: (*GraphServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateGraph",
			Handler:       _Graph_CreateGraph_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2f, 0x4a, 0x2c,
	0xc8, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x4c, 0xb8, 0xd8, 0xfc,
	0x8b, 0x32, 0xd3, 0x33, 0xf3, 0x84, 0xc4, 0xb8, 0xd8, 0x52, 0x52, 0xd3, 0x8b, 0x52, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xa0, 0x3c, 0x21, 0x21, 0x2e, 0x96, 0xf4, 0xd2, 0xcc, 0x14,
	0x09, 0x26, 0xa0, 0x28, 0x67, 0x10, 0x98, 0xad, 0x64, 0xc7, 0xc5, 0xe2, 0x9a, 0x92, 0x8e, 0x90,
	0x63, 0x44, 0xc8, 0x81, 0xc4, 0xd2, 0x8a, 0xf2, 0x73, 0x61, 0xea, 0x41, 0x6c, 0x21, 0x3e, 0x2e,
	0xa6, 0x92, 0x7c, 0x09, 0x66, 0xb0, 0x08, 0x90, 0x65, 0x64, 0xc6, 0xc5, 0xea, 0x0e, 0xb2, 0x5e,
	0x48, 0x97, 0x8b, 0xdb, 0xb9, 0x28, 0x35, 0xb1, 0x24, 0x15, 0xc2, 0xe5, 0xd5, 0x83, 0x38, 0x11,
	0xe2, 0x24, 0x29, 0x6e, 0x28, 0x17, 0x64, 0x97, 0x12, 0x83, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0xed,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x80, 0x85, 0xf5, 0xca, 0x00, 0x00, 0x00,
}
